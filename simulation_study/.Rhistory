sim(intercept,
betas,
overall_eff,
sigma_cluster_sq,
sigma_expt_sq,
n_per,
sd_n_per,
t_max,
k_max,
crossover_t)
??pchibarsq
library(emdbook)
sim(intercept,
betas,
overall_eff,
sigma_cluster_sq,
sigma_expt_sq,
n_per,
sd_n_per,
t_max,
k_max,
crossover_t)
out <- foreach(iter = 1:2, .combine=rbind) %do% sim(intercept,
betas,
overall_eff,
sigma_cluster_sq,
sigma_expt_sq,
n_per,
sd_n_per,
t_max,
k_max,
crossover_t)
expt_max = t_max - min(crossover_t)
expt_max
expt_max = t_max - min(crossover_t) + 1
expt_max
count = round(rnorm(t_max*k_max, n_per, sd_n_per))
count[count < 2] = 2
freq_table = expand.grid(t = rep(1:t_max),
k = rep(1:k_max))
freq_table$count = count
data = freq_table[rep(1:nrow(freq_table), freq_table[["count"]]), ]
N = nrow(data)
rownames(data) = 1:N
data$id = 1:N
data = data %>%
mutate(id = 1:N,
cross_t = k,
cross_t = as.numeric(
as.character(
factor(cross_t,
labels=crossover_t))))
data$expt <- data$t - data$cross_t + 1
max(data$expt)
data[data$expt<0,]$expt = 0
data %>%
group_by(t,k) %>%
dplyr::summarize(mean(expt))
library(doParallel)
library(lme4)
library(dplyr)
library(tidyr)
library(emdbook)
## Sample Parameter values:
# nsims is number of simulations to be run
nsims = 2
# R is the number of permutations in permuation test
R = 2
intercept = 0.3
overall_eff = 1
sigma_cluster_sq = 0.1
sigma_expt_sq = 0.2
n_per = 30
sd_n_per = 0
t_max = 8
k_max = 7
# crossover_t must have length k_max
crossover_t = 2:t_max
expt_max = t_max - min(crossover_t) + 1
betas = rnorm(t_max)
expt_eff <- c(0,
rnorm(expt_max, 0, sqrt(sigma_expt_sq)))
#
# Simulates a SW-CRT based on Model 5, and fits Model 5
# @param {intercept} Value of mu (overall intercept)
# @param {betas} Vector of time-specific effect estimates
# @param {overall_eff} Value of phi
# @param {sigma_cluster_sq} Value of the random cluster intercept
# (sigma_alpha^2)
# @param {sigma_expt_sq} Value of the random exposure time slope
# (sigma_delta^2)
# @param {n_per} The average number of individuals per cluster-time
# period
# @param {sd_n_per} Standard deviation of number of individuals per cluster-time
# period (0=all equal)
# @param {t_max} Number of time periods
# @param {k_max} [default] Number of clusters
# @param {crossover_t} Vector with time of cross-over
# for each cluster
#
# @returns {ret} A data.frame with the p-values from the Model 4
# LR test, permutation test, and Model 5 LR test, respectively.
sim <- function(intercept,
betas,
overall_eff,
sigma_cluster_sq,
sigma_expt_sq,
n_per,
sd_n_per,
t_max,
k_max,
crossover_t
) {
if (length(crossover_t) != k_max) {
print("Error: crossover_t must be of length k_max")
return()
}
count = round(rnorm(t_max*k_max, n_per, sd_n_per))
count[count < 2] = 2
freq_table = expand.grid(t = rep(1:t_max),
k = rep(1:k_max))
freq_table$count = count
data = freq_table[rep(1:nrow(freq_table), freq_table[["count"]]), ]
N = nrow(data)
rownames(data) = 1:N
data$id = 1:N
data = data %>%
mutate(id = 1:N,
cross_t = k,
cross_t = as.numeric(
as.character(
factor(cross_t,
labels=crossover_t))))
data$expt <- data$t - data$cross_t + 1
data[data$expt<0,]$expt = 0
data$trt = ifelse(data$expt==0,0,1)
cluster_ranef <- rnorm(k_max, 0, sqrt(sigma_cluster_sq))
data$g <- intercept +
overall_eff*data$trt +
apply(data,
1,
function(x) {
# cluster intercept
# Background calendar time
# exposure time random effect
cluster_ranef[as.numeric(x["k"])]+
betas[as.numeric(x["t"])] +
expt_eff[as.numeric(x["expt"]+1)]
})
# Prob(Y=1) = expit(g)
data$prob <- exp(data$g)/(1+exp(data$g))
# Generate 0/1 outcome Y
data$Y <- rbinom(nrow(data),1,data$prob)
model_4 <- glmer(Y ~ as.factor(expt) +
as.factor(t) +
(1 | k),
data, family=binomial)
model_5 <- glmer(Y ~ trt + as.factor(t) +
(1 | k)+
(0 + trt | expt),
data, family=binomial)
model_1 <- glmer(Y ~ trt +
as.factor(t) +
(1 | k),
data, family=binomial)
q_obs = anova(model_5,model_1)$Chisq[2]
onePermute <- function() {
data = data %>%
filter(expt > 0) %>%
group_by(k) %>%
mutate(expt_perm = sample(expt)) %>%
select(id, expt_perm) %>%
right_join(data, by=c("id","k")) %>%
mutate(expt_perm = replace_na(expt_perm, 0))
model_5_perm = glmer(Y ~ trt +
as.factor(t) +
(0 + trt | expt_perm)+
(1 | k),
family="binomial",
data=data)
return(c(anova(model_5_perm,model_1)$Chisq[2]))
}
perm_dist = unlist(lapply(1:R, function(i) {
onePermute()
}))
ret = data.frame(
mod_4_lr_pval = anova(model_4,model_1)[2,8],
permutation_pval = length(perm_dist[perm_dist>=q_obs])/R,
mod_5_lr_pval = 1-pchibarsq(q_obs,2)
)
return(ret)
}
out <- foreach(iter = 1:nsims, .combine=rbind) %do% sim(intercept,
betas,
overall_eff,
sigma_cluster_sq,
sigma_expt_sq,
n_per,
sd_n_per,
t_max,
k_max,
crossover_t)
out
colMeans(out < 0.05)
library(ggplot2)
library(reshape)
install.packages("reshape")
library(reshape)
load("~/Dropbox/dissertation/paper1/rcode/plot_data.Rda")
plot_data %>%
mutate(
ratio_4_1 = model4_var/model1_var,
E = n.t - 1
) %>%
dplyr::select(E, icc, model1_var, model4_var, ratio_4_1) %>%
View()
library(dplyr)
plot_data %>%
mutate(
ratio_4_1 = model4_var/model1_var,
E = n.t - 1
) %>%
dplyr::select(E, icc, model1_var, model4_var, ratio_4_1) %>%
View()
plot_data %>%
ggplot(aes(x=n.t-1,y=model4_var,col=as.factor(icc))) +
geom_point()+
geom_line() +
labs(x="E",
y="Variance",
col="ICC")
ggsave(file = "/Users/laramaleyeff/Dropbox/dissertation/paper1/figures/paper/variance_model_4.eps",
width=6,
height=4,
device=cairo_ps)
install.packages("svglite")
setwd("~/Documents")
gridsvg("viz_csa_rh.svg", width=6, height=3, res=96)
library(cowplot)
install.packages("rsvg")
install.packages("grImport2")
rsvg_svg("viz_csa_rh.svg")
library(rsvg)
rsvg_svg("viz_csa_rh.svg")
SVGlogo <- readPicture("viz_csa_rh.svg")
library(grImport2)
SVGlogo <- readPicture("viz_csa_rh.svg")
?rsvg_svg
rsvg_svg("bit", "viz_csa_rh.svg")
setwd("~/Documents")
rsvg_svg("bit", "viz_csa_rh.svg")
?rsvg_svg
rsvg_svg("viz_csa_rh.svg", "viz_csa_rh-cairo.svg")
SVGlogo <- readPicture("viz_csa_rh-cairo.svg")
grid.picture(SVGlogo)
dev.off()
grid.picture(SVGlogo)
rsvg_svg("viz_csa_no_sulcal.svg", "viz_csa_no_sulcal-cairo.svg")
csa_nos <- readPicture("viz_csa_no_sulcal-cairo.svg")
grid.picture(csa_nos)
plot_grid(csa_nos,csa_rh)
csa_rh <- readPicture("viz_csa_rh-cairo.svg")
library(cowplot)
plot_grid(csa_nos,csa_rh)
rsvg_svg("viz_csa_no_sulcal.svg", "viz_csa_no_sulcal-cairo.svg")
csa_nos <- readPicture("viz_csa_no_sulcal-cairo.svg")
csa_nos_grob <- pictureGrob(csa_nos, ext="gridSVG", delayContent=FALSE)
install.packages("gridSVG")
library(gridSVG)
csa_nos_grob <- pictureGrob(csa_nos, ext="gridSVG", delayContent=FALSE)
csa_rh_grob <- pictureGrob(csa_rh, ext="gridSVG", delayContent=FALSE)
plot_grid(csa_nos_grob)
plot_grid(csa_nos_grob, csa_rh, labels = c("A", "B"))
plot_grid(csa_nos_grob, csa_rh_grob, labels = c("A", "B"))
rsvg_svg("viz_csa_lt.svg", "viz_csa_lt-cairo.svg")
csa_lt <- readPicture("viz_csa_lt-cairo.svg")
csa_lt_grob <- pictureGrob(csa_lt, ext="gridSVG", delayContent=FALSE)
rsvg_svg("viz_csa_rt.svg", "viz_csa_rt-cairo.svg")
csa_rt <- readPicture("viz_csa_rt-cairo.svg")
csa_rt_grob <- pictureGrob(csa_rt, ext="gridSVG", delayContent=FALSE)
rsvg_svg("viz_csa_lf.svg", "viz_csa_lf-cairo.svg")
csa_lf <- readPicture("viz_csa_lf-cairo.svg")
csa_lf_grob <- pictureGrob(csa_lf, ext="gridSVG", delayContent=FALSE)
plot_grid(csa_nos_grob, csa_lf_grob,
csa_lt_grob,
csa_rh_grob,
csa_rt_grob,labels = c("A", "B", "C", "D", "E"))
plot_grid(csa_nos_grob, csa_lf_grob,
csa_lt_grob,
csa_rh_grob,
csa_rt_grob,labels = c("A", "B", "C", "D", "E"),
nrow=3)
rsvg_svg("viz_nls_ro.svg", "viz_nls_ro-cairo.svg")
rsvg_svg("viz_nls_ro.svg", "viz_nls_ro-cairo.svg")
nls_ro <- readPicture("viz_nls_ro-cairo.svg")
nls_ro_grob <- pictureGrob(nls_rt, ext="gridSVG", delayContent=FALSE)
rsvg_svg("viz_nls_ro.svg", "viz_nls_ro-cairo.svg")
nls_ro <- readPicture("viz_nls_ro-cairo.svg")
nls_ro_grob <- pictureGrob(nls_rt, ext="gridSVG", delayContent=FALSE)
nls_ro_grob <- pictureGrob(nls_ro, ext="gridSVG", delayContent=FALSE)
rsvg_svg("viz_nls_rf.svg", "viz_nls_rf-cairo.svg")
nls_rf <- readPicture("viz_nls_rf-cairo.svg")
nls_rf_grob <- pictureGrob(nls_rf, ext="gridSVG", delayContent=FALSE)
rsvg_svg("viz_nls_rh.svg", "viz_nls_rh-cairo.svg")
nls_rh <- readPicture("viz_nls_rh-cairo.svg")
nls_rh_grob <- pictureGrob(nls_rh, ext="gridSVG", delayContent=FALSE)
rsvg_svg("viz_nls_no_sulcal.svg", "viz_nls_no_sulcal-cairo.svg")
nls_nos <- readPicture("viz_nls_no_sulcal-cairo.svg")
nls_nos_grob <- pictureGrob(nls_nos, ext="gridSVG", delayContent=FALSE)
plot_grid(nls_nos_grob,
nls_rh_grob,
nls_ro_grob,
nls_rf_grob,labels = c("A", "B", "C", "D", "E"),
nrow=3)
plot_grid(nls_nos_grob,
nls_rh_grob,
nls_ro_grob,
nls_rf_grob,labels = c("A", "B", "C", "D"),
nrow=2)
rsvg_svg("viz_tower_rt.svg", "viz_tower_rt-cairo.svg")
tower_rt <- readPicture("viz_tower_rt-cairo.svg")
tower_rt_grob <- pictureGrob(tower_rt, ext="gridSVG", delayContent=FALSE)
rsvg_svg("viz_tower_rf.svg", "viz_tower_rf-cairo.svg")
tower_rf <- readPicture("viz_tower_rf-cairo.svg")
tower_rf_grob <- pictureGrob(tower_rf, ext="gridSVG", delayContent=FALSE)
rsvg_svg("viz_tower_lh.svg", "viz_tower_lh-cairo.svg")
tower_lh <- readPicture("viz_tower_lh-cairo.svg")
tower_lh_grob <- pictureGrob(tower_lh, ext="gridSVG", delayContent=FALSE)
rsvg_svg("viz_tower_no_sulcal.svg", "viz_tower_no_sulcal-cairo.svg")
tower_nos <- readPicture("viz_tower_no_sulcal-cairo.svg")
tower_nos_grob <- pictureGrob(tower_nos, ext="gridSVG", delayContent=FALSE)
plot_grid(tower_nos_grob,
tower_lh_grob,
tower_rf_grob,
tower_rt_grob,labels = c("A", "B", "C", "D"),
nrow=2)
plot_grid(nls_nos_grob,
nls_rh_grob,
nls_rf_grob,
nls_ro_grob,labels = c("A", "B", "C", "D"),
nrow=2)
library(dplyr)
library(plyr)
library(readr)
library(xtable)
library(ggplot2)
library(e1071)
library(cowplot)
load("./cont_overall_estimation/cont_all.Rda")
setwd("~/Dropbox/dissertation/paper1/rcode/biometrics_code/simulation_study")
load("./cont_overall_estimation/cont_all.Rda")
cont_all %>%
filter(expt == 0) %>%
group_by(expt, model, scenario, n_per, sd_expt, t_max) %>%
dplyr::summarize(n=n(), conv=mean(conv),
param=mean(param)) %>%
View()
#
# Table 3
#
cont_8_7_100 = cont_all %>%
filter(conv == 1, B > 0, expt == 0, t_max == 8, n_per == 100) %>%
mutate(scenario = factor(scenario, levels = c(1,10,2,4))) %>%
group_by(scenario, model) %>%
dplyr::summarize(
mean_param = mean(est_param),
mean_sigma_alpha = mean(sqrt(est_sigma_alpha_sq)),
mean_sigma_delta = mean(sqrt(est_sigma_delta_sq),na.rm=TRUE),
empirical_se = sd(est_param),
model_se = mean(est_se),
boot_se_k = mean(se_boots_k),
coverage_boots_normal_k = mean(coverage_boots_normal_k)*100,
boot_se_k_t = mean(se_boots_k_t),
coverage_boots_normal_k_t = mean(coverage_boots_normal_k_t)*100
) %>%
dplyr::mutate(mean_sigma_delta = ifelse(is.na(mean_sigma_delta), '-',
format(round(mean_sigma_delta,3),
nsmall = 3)))
print(xtable(cont_8_7_100[,c(-1)],digits = c(0,0,3,3,3,3,3,3,1,3,1)
), include.rownames = FALSE)
#
# Table S1
#
cont_30_29_100 = cont_all %>%
filter(conv == 1, B > 0, expt == 0,
t_max == 30, n_per == 100,
sd_expt == 2) %>%
mutate(scenario = factor(scenario, levels = c(1,10,2,4))) %>%
group_by(scenario, model) %>%
dplyr::summarize(
mean_param = mean(est_param),
mean_sigma_alpha = mean(sqrt(est_sigma_alpha_sq)),
mean_sigma_delta = mean(sqrt(est_sigma_delta_sq),na.rm=TRUE),
empirical_se = sd(est_param),
model_se = mean(est_se),
# coverage_model=mean(coverage_model)*100,
boot_se_k = mean(se_boots_k),
coverage_boots_normal_k = mean(coverage_boots_normal_k)*100,
boot_se_k_t = mean(se_boots_k_t),
coverage_boots_normal_k_t = mean(coverage_boots_normal_k_t)*100
) %>%
dplyr::mutate(mean_sigma_delta = ifelse(is.na(mean_sigma_delta), '-',
format(round(mean_sigma_delta,3),
nsmall = 3)))
print(xtable(cont_30_29_100[,c(-1)],digits = c(0,0,3,3,3,3,3,3,1,3,1)
), include.rownames = FALSE)
#
# Table S1
#
cont_30_29_100 = cont_all %>%
filter(B > 0, expt == 0,
t_max == 30, n_per == 100,
sd_expt == 2) %>%
mutate(scenario = factor(scenario, levels = c(1,10,2,4))) %>%
group_by(scenario, model) %>%
dplyr::summarize(
mean_param = mean(est_param),
mean_sigma_alpha = mean(sqrt(est_sigma_alpha_sq)),
mean_sigma_delta = mean(sqrt(est_sigma_delta_sq),na.rm=TRUE),
empirical_se = sd(est_param),
model_se = mean(est_se),
# coverage_model=mean(coverage_model)*100,
boot_se_k = mean(se_boots_k),
coverage_boots_normal_k = mean(coverage_boots_normal_k)*100,
boot_se_k_t = mean(se_boots_k_t),
coverage_boots_normal_k_t = mean(coverage_boots_normal_k_t)*100
) %>%
dplyr::mutate(mean_sigma_delta = ifelse(is.na(mean_sigma_delta), '-',
format(round(mean_sigma_delta,3),
nsmall = 3)))
print(xtable(cont_30_29_100[,c(-1)],digits = c(0,0,3,3,3,3,3,3,1,3,1)
), include.rownames = FALSE)
View(cont_30_29_100)
#
# Table S1
#
cont_30_29_100 = cont_all %>%
filter(conv == 1, B > 0, expt == 0,
t_max == 30, n_per == 100,
(sd_expt == 2 | sd_expt == 0)) %>%
mutate(scenario = factor(scenario, levels = c(1,10,2,4))) %>%
group_by(scenario, model) %>%
dplyr::summarize(
mean_param = mean(est_param),
mean_sigma_alpha = mean(sqrt(est_sigma_alpha_sq)),
mean_sigma_delta = mean(sqrt(est_sigma_delta_sq),na.rm=TRUE),
empirical_se = sd(est_param),
model_se = mean(est_se),
# coverage_model=mean(coverage_model)*100,
boot_se_k = mean(se_boots_k),
coverage_boots_normal_k = mean(coverage_boots_normal_k)*100,
boot_se_k_t = mean(se_boots_k_t),
coverage_boots_normal_k_t = mean(coverage_boots_normal_k_t)*100
) %>%
dplyr::mutate(mean_sigma_delta = ifelse(is.na(mean_sigma_delta), '-',
format(round(mean_sigma_delta,3),
nsmall = 3)))
print(xtable(cont_30_29_100[,c(-1)],digits = c(0,0,3,3,3,3,3,3,1,3,1)
), include.rownames = FALSE)
#
# Table S2
#
cont_vary_sd_expt = cont_all %>%
filter(conv == 1,
B > 0,
expt == 0,
t_max == 30,
(scenario %in% c(1,10))) %>%
group_by(n_per, sd_expt, model) %>%
dplyr::summarize(
mean_param = mean(est_param),
mean_sigma_alpha = mean(sqrt(est_sigma_alpha_sq)),
mean_sigma_delta = mean(sqrt(est_sigma_delta_sq),na.rm=TRUE),
empirical_se = sd(est_param),
model_se = mean(est_se),
# coverage_model=mean(coverage_model)*100,
boot_se_k = mean(se_boots_k),
coverage_boots_normal_k = mean(coverage_boots_normal_k)*100,
boot_se_k_t = mean(se_boots_k_t),
coverage_boots_normal_k_t = mean(coverage_boots_normal_k_t)*100
) %>%
dplyr::mutate(mean_sigma_delta = ifelse(is.na(mean_sigma_delta), '-',
format(round(mean_sigma_delta,3),
nsmall = 3)))
print(xtable(cont_vary_sd_expt,digits = c(0,0,1,0,3,3,3,3,3,3,1,3,1)
), include.rownames = FALSE)
load("./binary_overall_estimation/bin_all_less.Rda")
#
# Create Table 4: assessing estimation
# of overall treatment effect
bin_a_boot_table = bin_all_less %>%
filter(conv == 1,B > 0, expt == 0) %>%
mutate(scenario = factor(scenario, levels = c(1,10,2,4)),
n_per = factor(n_per,
levels=c("from_data", 100, 500),
labels=c("34 [6-96]", 100, 500))) %>%
group_by(scenario, k_max, n_per, model) %>%
dplyr::summarize(
mean_param = mean(est_param),
mean_sigma_alpha = mean(sqrt(est_sigma_alpha_sq)),
mean_sigma_delta = mean(sqrt(est_sigma_delta_sq),na.rm=TRUE),
empirical_se = sd(est_param),
model_se = mean(est_se),
boot_se_k = mean(se_boots_k),
coverage_boots_normal_k = mean(coverage_boots_normal_k)*100,
boot_se_k_t = mean(se_boots_k_t),
coverage_boots_normal_k_t = mean(coverage_boots_normal_k_t)*100
) %>%
dplyr::mutate(mean_sigma_delta = ifelse(is.na(mean_sigma_delta), '-',
round(mean_sigma_delta,3)))
print(xtable(bin_a_boot_table[c(-1)],digits = c(0,0,0,0,3,3,3,3,3,3,1,3,1)
), include.rownames = FALSE)
